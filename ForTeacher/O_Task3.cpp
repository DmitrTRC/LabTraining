//
// Created by Dmitry Morozov on 04.01.2022.
//

/*
 * ‚Ññ3. –ú–∞–∫—Å–∏–º—É–º

–î–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞, –≤ –∫–æ—Ç–æ—Ä–æ–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –Ω–∞–ø–∏—Å–∞–Ω—ã –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ —á–∏—Å–ª–∞. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç –Ω–∞–∏–±–æ–ª—å—à–µ–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Ç—Ä–µ—Ö —á–∏—Å–µ–ª –∏–∑ –¥–∞–Ω–Ω–æ–≥–æ —Ä—è–¥–∞ –∫ –∏—Ö —Å—É–º–º–µ (—Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ 2 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –¥–µ—Å—è—Ç–∏—á–Ω–æ–π —Ç–æ—á–∫–∏). –ß–∏—Å–ª–∞ –º–æ–≥—É—Ç –±—ã—Ç—å —Ä–∞–≤–Ω—ã –º–µ–∂–¥—É —Å–æ–±–æ–π –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏, –Ω–æ –¥–æ–ª–∂–Ω—ã —Å—Ç–æ—è—Ç—å –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö –≤ –∏—Å—Ö–æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.

–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: —Å—Ç—Ä–æ–∫–∞ —á–∏—Å–µ–ª —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª
–í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: –Ω–∞–∏–±–æ–ª—å—à–µ–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∏–∑ —Ç—Ä–µ—Ö —á–∏—Å–µ–ª –∫ –∏—Ö —Å—É–º–º–µ.

–¢–µ—Å—Ç–æ–≤—ã–µ –ø–∞—Ä—ã:

–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: 1 2 3 4
–í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: 2.66 –∏–ª–∏ 2.67

–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: 5 12 1 50 9 5 2 11
–í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: 90.41

–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: 3 3 3
–í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: 3, 3.0 –∏–ª–∏ 3.00

–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: 10 20 30 40 50 60 50 40 30 20 10
–í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: 937.5 –∏–ª–∏ 937.50

–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: 99 98 97 98 50 31 99 98 97
–í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: 3244.92 –∏–ª–∏ 3244.93

–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: 1 1 1 1 1 1 1 1 1 1 1
–í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: 0.33
 */

#include <vector>
#include <string>
#include <iostream>
#include  <sstream>
#include <cassert>
#include <cmath>



//Round  to  2  digits
double round_to_2 (double value) {
    return round (value * 100) / 100;
}


// return  maximum   ( multiplication  three numbers / sum these numbers )  in the string
double max_relation (const std::string &str) {
    std::vector<double> numbers;
    std::stringstream ss (str);
    double number;
    while (ss >> number) {
        numbers.push_back (number);
    }
    assert(numbers.size () >= 3);
    double max_relation = 0;
    for (int i = 0; i < numbers.size () - 2; ++i) {
        for (int j = i + 1; j < numbers.size () - 1; ++j) {
            for (int k = j + 1; k < numbers.size (); ++k) {
                double relation = numbers[i] * numbers[j] * numbers[k] / (numbers[i] + numbers[j] + numbers[k]);
                if (relation > max_relation) {
                    max_relation = relation;
                }
            }
        }
    }

    return round_to_2 (max_relation);;
}

void Tests () {
    assert(max_relation ("1 2 3 4") == 2.66 || max_relation ("1 2 3 4") == 2.67);
    assert(max_relation ("5 12 1 50 9 5 2 11") == 90.41);
    assert(max_relation ("3 3 3") == 3.0 || max_relation ("3 3 3") == 3.00);
    assert(max_relation ("10 20 30 40 50 60 50 40 30 20 10") == 937.5 ||
           max_relation ("10 20 30 40 50 60 50 40 30 20 10") == 937.50);
    assert(max_relation ("99 98 97 98 50 31 99 98 97") == 3244.92 ||
           max_relation ("99 98 97 98 50 31 99 98 97") == 3244.93);
    assert(max_relation ("1 1 1 1 1 1 1 1 1 1 1") == 0.33);

    std::cout << "All tests Task 3 : passed üëç" << std::endl;

}

int main () {
    Tests ();
}
